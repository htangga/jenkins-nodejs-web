apiVersion: v1
kind: Namespace
metadata:
  name: node-example

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-example 
  namespace: node-example
  
---
  
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJoYXJib3IudW5pbWVkLmFjLmlkIjp7InVzZXJuYW1lIjoiYXV0b21hdGlvbiIsInBhc3N3b3JkIjoiQEF1dG9tYXRpb24yMDIwIiwiZW1haWwiOiJpdGluZnJhQHVuaW1lZC5hYy5pZCIsImF1dGgiOiJZWFYwYjIxaGRHbHZianBBUVhWMGIyMWhkR2x2YmpJd01qQT0ifX19
kind: Secret
metadata:
  name: regcred
  namespace: node-example
type: kubernetes.io/dockerconfigjson

---

apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: tls-ca-unimed
  namespace: node-example
data:
  ca.crt: 
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdkRENDQlZ5Z0F3SUJBZ0lSQU5jdnZBcHk0OUtJZXZoVnpqcTh0Ymd3RFFZSktvWklodmNOQVFFTEJRQXcKZ1k4eEN6QUpCZ05WQkFZVEFrZENNUnN3R1FZRFZRUUlFeEpIY21WaGRHVnlJRTFoYm1Ob1pYTjBaWEl4RURBTwpCZ05WQkFjVEIxTmhiR1p2Y21ReEdEQVdCZ05WQkFvVEQxTmxZM1JwWjI4Z1RHbHRhWFJsWkRFM01EVUdBMVVFCkF4TXVVMlZqZEdsbmJ5QlNVMEVnUkc5dFlXbHVJRlpoYkdsa1lYUnBiMjRnVTJWamRYSmxJRk5sY25abGNpQkQKUVRBZUZ3MHhPVEF6TWpnd01EQXdNREJhRncweU1UQXpNamN5TXpVNU5UbGFNRm94SVRBZkJnTlZCQXNUR0VSdgpiV0ZwYmlCRGIyNTBjbTlzSUZaaGJHbGtZWFJsWkRFY01Cb0dBMVVFQ3hNVFEwOU5UMFJQSUZOVFRDQlhhV3hrClkyRnlaREVYTUJVR0ExVUVBd3dPS2k1MWJtbHRaV1F1WVdNdWFXUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQ3RTSHhGVUNBNHNiRTZFQkwzbjRBN1BWamVyQWZHSTA5MHMwaUJpSUc3UVVmcwpQZ1ZDU0VxbGN6SnR1aTdqSXh2YzEvWFdKZ3cwVTJZSGNTOXlvY2RwREd2SzVzNzZNbG1QSE5xVDlsY1hBeHlKCkN2RHBnU0NPZGM4YnRBK2JwSDhDQUJ3ZWZ3NFJING9XYlhpMHZGOE1rdUJHdTdmSlpIR3NqZ29Ha0IycGdmSk8KQlZpa01ZeFk3VHIyanluUzFVU3JNaVlSakEvc1BRUEpIVXFRMGp2WkV1WU1WdW52ZDlsMkhUczZFWGdMdFFMTAo4TkV5b3R6bm4wL1Yzc0hrTVN2aFlCUWNUTlFhckFzVng0UDc2TVQzVG5XRUJMaXdWelE5N2YxVTNmc3czM0E0Cm1ZQXJmZU91YVkwVktGS1NJZDZVaDdlenFvMUFYc2hLSXNXV0E3RWhBZ01CQUFHamdnTDlNSUlDK1RBZkJnTlYKSFNNRUdEQVdnQlNOakY3RVZLMks0WGZwbS9tYkJlRzRBWTFoNFRBZEJnTlZIUTRFRmdRVTU1dnZmdEpMNi96UQp6VzNEOXFhbjJGdFlDREl3RGdZRFZSMFBBUUgvQkFRREFnV2dNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBsCkJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUVrR0ExVWRJQVJDTUVBd05BWUxLd1lCQkFHeU1RRUMKQWdjd0pUQWpCZ2dyQmdFRkJRY0NBUllYYUhSMGNITTZMeTl6WldOMGFXZHZMbU52YlM5RFVGTXdDQVlHWjRFTQpBUUlCTUlHRUJnZ3JCZ0VGQlFjQkFRUjRNSFl3VHdZSUt3WUJCUVVITUFLR1EyaDBkSEE2THk5amNuUXVjMlZqCmRHbG5ieTVqYjIwdlUyVmpkR2xuYjFKVFFVUnZiV0ZwYmxaaGJHbGtZWFJwYjI1VFpXTjFjbVZUWlhKMlpYSkQKUVM1amNuUXdJd1lJS3dZQkJRVUhNQUdHRjJoMGRIQTZMeTl2WTNOd0xuTmxZM1JwWjI4dVkyOXRNQ2NHQTFVZApFUVFnTUI2Q0Rpb3VkVzVwYldWa0xtRmpMbWxrZ2d4MWJtbHRaV1F1WVdNdWFXUXdnZ0Y5QmdvckJnRUVBZFo1CkFnUUNCSUlCYlFTQ0FXa0Jad0IyQUx2WjM3d2ZpbkcxazVRamw2cVNlMGM0VjVVS3ExTG9HcENXWkRhT0h0R0YKQUFBQmFjTzExTU1BQUFRREFFY3dSUUloQVBxb1krY3BOa3FrckNYY3Fib0RzQnR2clJyK2tjblF6bmRPd3Y1dgpONXBoQWlCaXM1Z3RsTko4OWRwWGFuZFBMOXpINmZ0czJGT1Zicml6bWd3NWdQZVdRZ0IxQUVTVVpTNnc3czZ2CnhFQUgyS2orS01EYTVvSysyTXN4dFQvVE01YTF0b0dvQUFBQmFjTzExUTRBQUFRREFFWXdSQUlnZHpCay9TOTEKVGFoZXVhM0x3eEk4TXQvcXFBT2JVc0F2SE1QaGt3eHFjaVlDSUNWYkVmTFVwUGRHcHVTVktPZmtDT2oxYVp6ZApWTkRhRFI5UkNldEMrek80QUhZQVhOeERrdjdtcTBWRXNWNmExRmJtRURmNzFmcEgzS0Z6bExKZTV2YkhEc29BCkFBRnB3N1hWQ3dBQUJBTUFSekJGQWlFQTNzZGVyTE1ES1Bab2JNUmVUT3BKNEZSODB5dytqYnlzSElPOGpUWnEKU3kwQ0lCZDZSWXVIcFMyOHlSbUpoZndvcVZsbi95MWxIbnhSMFVMeXpGM2VRV1RNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmhmVWk3V1dkbVU5NnRocHlhZXkyeTJNUFlpV0Y1VDcyb0JRa045VmxybTdzZDYzWHJETDhXCnduR0JNWmQ2d2lNQU9BeWhoQ3FVRVVLczRkaXN1QitrcytrUlBzeVAxL3VIc3dHY3dJSnJoc2F3N1V5TzFFTmwKbU1rWDErMXppT21CR3V3azgzRFAyZDl1NnJQV0hiMEl3MlJIR1JKZDNzdDJ5eTl1ZWtsOUtxY1dPUTZCVUtzLwptK25walYzeFh4Mlp0Vld0d2lLRHZqMndDT3kxSlBkd1lJdXByMjIrNTR0Z3FId2J6N3dRT090NjlmcnI4eVJvClA0Q0xjMlpKVUU4djdhbnF6VWFYcks2N1g1WFFaYWxjK1RNY1AzRVJGRVZvaGxkVGZGcTBuaFc0OWgwOVFRd2IKWCt0Mm1TMzV0Y3RHRjF3RHVUbmNKU3J4OVVac0FqcHAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3RTSHhGVUNBNHNiRTYKRUJMM240QTdQVmplckFmR0kwOTBzMGlCaUlHN1FVZnNQZ1ZDU0VxbGN6SnR1aTdqSXh2YzEvWFdKZ3cwVTJZSApjUzl5b2NkcERHdks1czc2TWxtUEhOcVQ5bGNYQXh5SkN2RHBnU0NPZGM4YnRBK2JwSDhDQUJ3ZWZ3NFJING9XCmJYaTB2RjhNa3VCR3U3ZkpaSEdzamdvR2tCMnBnZkpPQlZpa01ZeFk3VHIyanluUzFVU3JNaVlSakEvc1BRUEoKSFVxUTBqdlpFdVlNVnVudmQ5bDJIVHM2RVhnTHRRTEw4TkV5b3R6bm4wL1Yzc0hrTVN2aFlCUWNUTlFhckFzVgp4NFA3Nk1UM1RuV0VCTGl3VnpROTdmMVUzZnN3MzNBNG1ZQXJmZU91YVkwVktGS1NJZDZVaDdlenFvMUFYc2hLCklzV1dBN0VoQWdNQkFBRUNnZ0VBRXpydEY2QVp3MURzOHgyZmpUMTFOSjNOUkFEaFovcTVNYUZIMWFBNWpYZGsKTFBLQkVPY0c2YStNRkNOS1dzaWxxZStKaDdkM09VTmNHazFVVDZ0bWZ1RHpBWFIxMmN4R3BodzBvYUQvN3p6WQpLTmsrL1Jyb2F3Ymw4aFFjZTFCWkMvYkpLQlUva1dUbnBTK0c2ci9RNkl0UU9tbFFyeGZuaVpmRnd3NnhUQU5CCitiQmpwS1M0N3ZKZmtmTVRPRE1mMjNubVJsOTYrRUg1SDUza1p5OXRUUVlIak1BUEdUVk5IMkdmcGVFU3J3OE4KMGVLWXBmYlByVlNyNUpIcnJ0NFhjbXpHZDA1RzBlTEdXSTdkR093Q0loWGNUVEIzRnFqSnR0OG03ZFJyT01zUgpJNXJ6M2I5M093WlVJUnFESjlETnFYMXhOY01DL00zSjRhVmpuT0lZTVFLQmdRRGQrcUR1WjVOb3lYZC9WRDJECm15YjVlZXJSd05GRXdiL3RhZ3lGNnpyTERwYnhUckFoVlArWVpCK0JZNm9OU2Rtb3RCaDZmZURUQkh0RVB6bU8KYm9rMWNVMFhDSXc1UE5zdlFVckVyZE5TSDI4RWNIcyt2RmVjSEYxakZPZWlWSnRxK2xrVE11MHo4QWhtUUpLTgowUHNoSXIybklwYTdna1ZwMlpVUzA3bWNqUUtCZ1FESDEwVFVnQjJ0dWhNZmpUOVhDOGFtTWZTNkVLMDY1Vk5DCkNEclVjc1ZKa0ZNSTg5OEpVd21jOHpPQ0s3TkFGNEVrV002ajZZb3c0ZVdHU0ZXMnB3dzdqTURXdFM2OHVNMFYKbEZBT25YMEFUYTdhbWFiMmpWUUYwbnBtTVErZU1jRE5XL1RFWVR2L3phdldmZWMra01vdmxWOGJRb3FXcG9ZYgoxQlg2ZS9rRDVRS0JnQURrNlpFTVNjTzZUQWp2UmZBcHg5WnBiMUM0L2g3UXlQMGoyRGtSNFlLLzVFdkVqV0VVCi9wS1dsS25veE42WTFZK2dhaGpVT1B1Z29QNTlZclg0TEFWVEY0Um9QR2hlbm1OcVYrckM2SDhFTVdaTExiUHEKL2s5YXJlV2dSKzZYZUtqTnFWNHlibEl2UFZsc0dTc0pGSG5sc2UzaWJja0RsVlAvMUdIbkNIQmhBb0dCQUl2MAp2V1c5bkF0eFI3ZFBLczhCbGt3S3JJUXE3Y2RUbUMya3FkN2p5anVzOGhwUkFTRDhvTHprcm13NXdyM2VPRG1HCllLSDNDeXNVNmJSVHNJUE5GZ29XbDI5SFVNWW0vcXBnUm5rVjN0ZDVrRDNVWWxSRndsU1poZE5RQk1vYnVoV1kKa3lGOW41R1ZMd1YzQTU2VHRLWUNqS3NBdlNLbzJUOWdGMHhueW92cEFvR0FhNVB3RTBWL0xUS3FFbk0wc2VXSQowK2lEL3Z4aE45UlZXSUptaGhqcTRJdnZZNktldzFib2hBM3BWS0dkcVVvalJjRzdqWVJEY0k5K1dGRUdwQzd2CmwvZ1BsTUdGcVk4dUtqVzlMUXpXaHFGYkd6UzlsLzZTUmo4VVNoNzcrc280UWtVN1dXSUx4MlczZFZIWWlPdWwKWGsvWFFMN0RCSnBZUWRUQXFCREkxRjQ9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-web
  labels:
    name: nodejs-web
    namespace: node-example
spec:
  selector:
    matchLabels:
      name: nodejs-web
  template:
    metadata:
      name: nodejs-web
      labels:
        name: nodejs-web
    spec:
      containers:
        - name: nodejs-web
          image: harbor.unimed.ac.id/library/nodejs-web:1
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
          ports:
            - containerPort: 3000
      imagePullSecrets: 
        - name: regcred

---

apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-name
  namespace: node-example
spec:
  minReplicas: 3
  maxReplicas: 5
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nodejs-web
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70

---

apiVersion: v1
kind: Service
metadata:
  name: nodejs-web-service
  namespace: node-example
spec:
  type: ClusterIP
  selector:
    name: nodejs-web
  ports:
    - port: 3000
      targetPort: 3000

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    # Create the secret containing the trusted ca certificates
    # nginx.ingress.kubernetes.io/auth-tls-secret: "node-example/ca-secret"
    # Specify the verification depth in the client certificates chain
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
    # Specify an error page to be redirected to verification errors
    # nginx.ingress.kubernetes.io/auth-tls-error-page: "http://www.mysite.com/error-cert.html"
    # Specify if certificates are passed to upstream server
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
  name: nginx-test
  namespace: node-example
spec:
  tls:
  - hosts:
    - example.unimed.ac.id
    secretName: "tls-ca-unimed"
  rules:
    - host: example.unimed.ac.id
      http:
        paths:
          - backend:
              serviceName: nodejs-web-service
              servicePort: 3000
